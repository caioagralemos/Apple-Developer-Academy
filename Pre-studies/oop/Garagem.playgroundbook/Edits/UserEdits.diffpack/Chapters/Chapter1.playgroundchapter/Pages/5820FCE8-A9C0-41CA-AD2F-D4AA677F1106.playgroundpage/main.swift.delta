<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>class Garagem {
    private var total_veiculos = 0
    private var vagas: Array&lt;Array&lt;Veiculo?&gt;&gt;
    init() {
        // 20 vagas pra terrestres, 3 pra aereos e 5 na doca
        self.vagas = [[nil,nil,nil,nil,nil,nil,nil,nil,nil,nil],[nil,nil,nil,nil,nil,nil,nil,nil,nil,nil],[nil,nil,nil],[nil,nil,nil,nil,nil]]
        print("Nova garagem criada");
    }
    
    func estacionar(v: Veiculo) {
        if (v.getVaga() == "Não está estacionado!") {
            let tipo = type(of: v)
            if (tipo == Carro.self || tipo == Moto.self) {
                if let index = self.vagas[0].firstIndex(where: { $0 == nil }) {
                    self.vagas[0][index] = v
                    print("\(v.description) estacionado na vaga terrestre A\(index+1)")
                    v.estacionar(vaga: "A\(index+1)")
                } else if let index = self.vagas[1].firstIndex(where: { $0 == nil }) {
                    self.vagas[1][index] = v
                    print("\(v.description) estacionado na vaga terrestre B\(index+1)")
                    v.estacionar(vaga: "B\(index+1)")
                } else {
                    print("Não há mais vagas pra veículos terrestres na sua garagem!")
                }
            } else if (tipo == Avião.self) {
                if let index = self.vagas[2].firstIndex(where: { $0 == nil }){
                    self.vagas[2][index] = v
                    print("\(v.description) estacionado na vaga de hangar H\(index+1)")
                    v.estacionar(vaga: "H\(index+1)")
                } else {
                    print("Não há mais espaço no seu hangar!")
                }
            } else {
                if let index = self.vagas[3].firstIndex(where: { $0 == nil }) {
                    self.vagas[3][index] = v
                    print("\(v.description) estacionado na doca D\(index+1)")
                        v.estacionar(vaga: "D\(index+1)")
                } else {
                        print("Não há mais espaço nas suas docas!")
                }
            }
        } else {print("Esse veículo já está estacionado!")}
    }
    
    // PAREI AQUI
    func tirar(v: String) {
        let vaga = Array(v)
        if let numero = Int(String(vaga[1])) {
            if (vaga[0] == "A") {
                vagas[0][numero-1] = nil
            } else if (vaga[0] == "B") {
                vagas[1][numero-1] = nil
            } else if (vaga[0] == "H"){
                vagas[2][numero-1] = nil
            } else if (vaga[0] == "D") {
                vagas[3][numero-1] = nil
            }
        } else {
            print("não consegui encontrar o veículo")
        }
    }
    
    func procurarVaga(v: String) {
        let vaga = Array(v)
        if let numero = Int(String(vaga[1])) {
            if (vaga[0] == "A") {
                if((vagas[0][numero-1]) != nil) {
                    print("VAGA \(v): \(vagas[0][numero-1]!.description)")
                } else {
                    print("VAGA \(v): VAZIA")
                }
            } else if (vaga[0] == "B") {
                if((vagas[1][numero-1]) != nil) {
                       print("VAGA \(v): \(vagas[1][numero-1]!.description)")
               } else {
                     print("VAGA \(v): VAZIA")
               }
            } else if (vaga[0] == "H"){
                if((vagas[2][numero-1]) != nil) {
                  print("VAGA \(v): \(vagas[2][numero-1]!.description)")
              } else {
                print("VAGA \(v): VAZIA")
              }
            } else if (vaga[0] == "D") {
                if((vagas[3][numero-1]) != nil) {
                  print("VAGA \(v): \(vagas[3][numero-1]!.description)")
                } else {
                    print("VAGA \(v): VAZIA")
                }
            }
        } else {
            print("Não foi possível encontrar seu veículo.")
        }
    }
    
    func resumo() {
        var vagas = ["A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "A10", "B1", "B2", "B3", "B4", "B5", "B6", "B7", "B8", "B9", "B10", "H1", "H2", "H3", "D1", "D2", "D3", "D4", "D5"]
        
        for vaga in vagas {
            procurarVaga(v: vaga)
        }
    }
}

class Veiculo {
    private let nome: String;
    private let marca: String;
    private let ano: Int;
    private let potenciaMotor: Double;
    private var estaLigado = false;
    private var velocidade = 0;
    private var vaga: String?;
    
    init(nome: String, potenciaMotor: Double, marca: String, ano: Int) {
        self.nome = nome
        self.potenciaMotor = potenciaMotor
        self.marca = marca
        self.ano = ano
    }
    
    public var description: String { return "\(marca) \(nome) \(ano)" }
    
    func giraChave() {
        if estaLigado == false {
            estaLigado = true;
            print("Seu veículo ligou");
        } else {
            if velocidade == 0 {
                estaLigado = false;
                print("Seu veículo desligou");
            } else {
                print("Não é possível desligar um veículo à \(velocidade)km/h!") 
            }
        }
    }
    
    func resumo() -&gt; String {
        return "Motor \(marca) \(ano) \(potenciaMotor)HP"
    }
    
    func getVaga() -&gt; String {
        return vaga ?? "Não está estacionado!"
    }
    
    func estacionar(vaga: String) {
        self.vaga = vaga
    }
    
    func sair(g: Garagem) {
        if (self.estaLigado) {
            if ((self.vaga) != nil) {
                g.tirar(v: self.vaga!)
                self.vaga = nil
                print("\(self.description) está nas ruas!")
            } else {
                print("Não está estacionado!")
            }
        } else {
            print("Ligue o veículo pra sair da garagem!")
        }
    }
}

class Carro: Veiculo {
    private let velMax: Int
    private let qntPortas: Int
    private let placa: String
    
    init(nome: String, potenciaMotor: Double, marca: String, ano: Int, velMax: Int, qntPortas: Int, placa: String) {
        self.velMax = velMax
        self.qntPortas = qntPortas
        self.placa = placa
        super.init(nome: nome, potenciaMotor: potenciaMotor, marca: marca, ano: ano)
    }
}

class Moto: Veiculo {
    private let velMax: Int
    private let placa: String
    
    init(nome: String, potenciaMotor: Double, marca: String, ano: Int, velMax: Int,  placa: String) {
        self.velMax = velMax
        self.placa = placa
        super.init(nome: nome, potenciaMotor: potenciaMotor, marca: marca, ano: ano)
    }
    
}

class Barco: Veiculo {
    private let tipo: String
    private let boaca: Int
    
    init(nome: String, potenciaMotor: Double, marca: String, tipo: String, ano: Int, velMax: Int,  placa: String, boaca: Int) {
        self.tipo = tipo
        self.boaca = boaca
        super.init(nome: nome, potenciaMotor: potenciaMotor, marca: marca, ano: ano)
    }
}

class Avião: Veiculo {
    private let qntPassageiros: Int
    private var altitude = 0;
    
    init(nome: String, potenciaMotor: Double, marca: String, ano: Int, velMax: Int,  placa: String, qntPassageiros: Int) {
        self.qntPassageiros = qntPassageiros
        super.init(nome: nome, potenciaMotor: potenciaMotor, marca: marca, ano: ano)
    }
}

var predioGaragem = Garagem()

var civicao = Carro(nome: "Civic", potenciaMotor: 120, marca: "Honda", ano: 2017, velMax: 200, qntPortas: 4, placa: "OHI9912")
var pop100 = Moto(nome: "Pop 110", potenciaMotor: 33, marca: "Honda", ano: 2023, velMax: 70, placa: "LLN8291")
var tt = Carro(nome: "TT", potenciaMotor: 212, marca: "Audi", ano: 2022, velMax: 275, qntPortas: 4, placa: "JAH0921")
var corolla = Carro(nome: "Corolla", potenciaMotor: 132, marca: "Toyota", ano: 2018, velMax: 195, qntPortas: 4, placa: "GHI5678")
var mustang = Carro(nome: "Mustang", potenciaMotor: 310, marca: "Ford", ano: 2020, velMax: 250, qntPortas: 2, placa: "XYZ1234")
var camaro = Carro(nome: "Camaro", potenciaMotor: 275, marca: "Chevrolet", ano: 2019, velMax: 240, qntPortas: 2, placa: "ABC9876")
var gol = Carro(nome: "Gol", potenciaMotor: 101, marca: "Volkswagen", ano: 2015, velMax: 180, qntPortas: 4, placa: "DEF4567")
var fiat500 = Carro(nome: "500", potenciaMotor: 135, marca: "Fiat", ano: 2021, velMax: 190, qntPortas: 2, placa: "JKL0123")
var bmw320 = Carro(nome: "320i", potenciaMotor: 184, marca: "BMW", ano: 2022, velMax: 235, qntPortas: 4, placa: "STU6789")
var audiA3 = Carro(nome: "A3", potenciaMotor: 150, marca: "Audi", ano: 2020, velMax: 220, qntPortas: 4, placa: "VWX3456")
var mercedesC = Carro(nome: "C-Class", potenciaMotor: 255, marca: "Mercedes-Benz", ano: 2021, velMax: 250, qntPortas: 4, placa: "OPQ8912")
var porsche911 = Carro(nome: "911", potenciaMotor: 379, marca: "Porsche", ano: 2022, velMax: 290, qntPortas: 2, placa: "MNO4567")
var teslaModelS = Carro(nome: "Model S", potenciaMotor: 670, marca: "Tesla", ano: 2021, velMax: 322, qntPortas: 4, placa: "EFG1234")
var nissanLeaf = Carro(nome: "Leaf", potenciaMotor: 147, marca: "Nissan", ano: 2019, velMax: 144, qntPortas: 4, placa: "HIJ7890")
var renaultZoe = Carro(nome: "Zoe", potenciaMotor: 134, marca: "Renault", ano: 2018, velMax: 135, qntPortas: 4, placa: "KLM4567")
var hyundaiIoniq = Carro(nome: "Ioniq", potenciaMotor: 139, marca: "Hyundai", ano: 2020, velMax: 165, qntPortas: 4, placa: "NOP1234")
var kiaSoulEV = Carro(nome: "Soul EV", potenciaMotor: 201, marca: "Kia", ano: 2021, velMax: 156, qntPortas: 4, placa: "QRS5678")
var jaguarIpace = Moto(nome: "I-PACE", potenciaMotor: 394, marca: "Jaguar", ano: 2022, velMax: 200, placa: "TUV8912")
var chevroletBolt = Moto(nome: "Bolt", potenciaMotor: 200, marca: "Chevrolet", ano: 2020, velMax: 145, placa: "WXY2345")

predioGaragem.estacionar(v: tt)
predioGaragem.estacionar(v: pop100)
predioGaragem.estacionar(v: civicao)
predioGaragem.estacionar(v: corolla)
predioGaragem.estacionar(v: mustang)
predioGaragem.estacionar(v: camaro)
predioGaragem.estacionar(v: gol)
predioGaragem.estacionar(v: fiat500)
predioGaragem.estacionar(v: bmw320)
predioGaragem.estacionar(v: audiA3)
predioGaragem.estacionar(v: mercedesC)
predioGaragem.estacionar(v: porsche911)
predioGaragem.estacionar(v: teslaModelS)
predioGaragem.estacionar(v: nissanLeaf)
predioGaragem.estacionar(v: renaultZoe)
predioGaragem.estacionar(v: hyundaiIoniq)
predioGaragem.estacionar(v: kiaSoulEV)
predioGaragem.estacionar(v: jaguarIpace)
predioGaragem.estacionar(v: chevroletBolt)

predioGaragem.resumo()
</string>
			<key>ModifiedRange</key>
			<string>{1, 10428}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{1, 0}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
