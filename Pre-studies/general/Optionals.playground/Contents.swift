// ### OPCIONAIS ###
// Tente usar o m√≠nimo de opcionais poss√≠vel e favore√ßa trabalhar com vars concretas
// E se utilizar, fa√ßa os unwraps o mais cedo poss√≠vel

let numero: Int = 7;

var podeserNumero: Int?
podeserNumero = Int("12334") // isso √© do tipo optional int, pois a string pode ou n√£o ser um valor que pode ser convertido pra Int

// Optional binding - vincular um valor a uma vari√°vel apenas se o valor n√£o for nulo

// if let (se houver valor, fa√ßa algo)
if let num2 = podeserNumero {
    print("Temos um n√∫mero (\(num2))")
} else {
    print("N√£o temos um n√∫mero.")
}

func printeNum(_ num: Int?) {
    guard let numero = num else {
        // guard let (se n√£o houver valor, fa√ßa algo)
        print("Nenhum n√∫mero foi passado.")
        return
    }
    
    print("Temos um n√∫mero (\(num!))")
}

printeNum(podeserNumero)

// Unwrapping a for√ßa
var n3: Int?
// print(n3!) pode gerar um erro.

// Lidando com nulos
print(n3 ?? "N√£o h√° n√∫meros") // se n√£o houver n3, printe o que vier depois de ??

/*
    ___       _   _               _     _                  _
   / _ \ _ __| |_(_)___ _ _  __ _| |   /_\  _ _ __ __ _ __| |___
  | (_) | '_ \  _| / _ \ ' \/ _` | |  / _ \| '_/ _/ _` / _` / -_)
   \___/| .__/\__|_\___/_||_\__,_|_| /_/ \_\_| \__\__,_\__,_\___|
        |_|

 */

/*
üïπ Unwrap with if-let

Unwrap the following Optional using the if let statement
*/

let firstname: String? = "Sam"
if let name = firstname {
    print("Hello, \(firstname!)")
} else {
    print("There is no First Name")
}

/*
üïπ Unwrap with guard

Unwrap the following Optional using the guard statement
*/

enum MyError: Error {
    case invalidUsername
}

let lastname: String? = "Flynn"

func checkLastName(_ lastnm: String?) {
    guard let last = lastnm else {
        print("No last name was given.")
        return
    }
    print("\(lastnm!) allowed at the system")
}

checkLastName(nil)
checkLastName(lastname)
